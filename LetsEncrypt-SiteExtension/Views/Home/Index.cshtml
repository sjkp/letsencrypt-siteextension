@model LetsEncrypt.SiteExtension.Models.AuthenticationModel

@{
    ViewBag.Title = "Authentication Settings";
}

<h2>Authentication Settings</h2>

<p>
    To automate the installation of Let's Encrypt SSL certificate on your Azure Web App, a few things need to be configured. The certificate is installed and renewed using the Azure Resource Manager API, because the renewal process should run unattended you need to register an Azure AD service principal that have access to at least the Azure Web App. Read more about how to register a service principal <a href="http://blogs.msdn.com/b/visualstudioalm/archive/2015/10/04/automating-azure-resource-group-deployment-using-a-service-principal-in-visual-studio-online-build-release-management.aspx">here</a>.
</p>
<p>
    Once you have registered a service principal, you should add the following App Setting, since the site extension reads them from there. You can register them manually or enter them below and check 'Update Web App Settings'.
</p>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Key</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.tenantKey</td>
            <td>The tenant name e.g. myazuretenant.onmicrosoft.com</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.subscriptionIdKey</td>
            <td>The subscription id, prepopulated with subscription id from the environment variable WEBSITE_OWNER_NAME</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.clientIdKey</td>
            <td>The value of the clientid of the service principal</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.clientSecretKey</td>
            <td>The secret for the service principal</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.resourceGroupNameKey</td>
            <td>The name of the resource group this web app belongs to, prepopulated with subscription id from the environment variable WEBSITE_OWNER_NAME</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.servicePlanResourceGroupNameKey</td>
            <td>The name of the resource group that the app service plan hosting the web app (should be the same as @LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.resourceGroupNameKey if app service plan and web app are placed in the same resource group)</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.useIPBasedSSL</td>
            <td>Check this if you want the certificate to be bound to the WebApps' IP address instead of using SNI. With IP based SSL additional costs might be charged.</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.tipSlotNameKey</td>
            <td>(Optional) Use this setting if you are using Testing-In-Production and you are currently serving from a deployment slot. The value should be the name of the slot (and the extension should be installed in <b>PRODUCTION</b> kudu portal)</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.siteSlotNameKey</td>
            <td>(Optional) Use this setting if you want to use the extension to setup SSL certificate for deployment slots, the value should be the name of the slot (and the extension should be installed in that slots kudu portal)</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.authorizationChallengeBlobStorageAccount</td>
            <td>(Optional) Set this setting to the connection string of a storage account, if you want to persist the http challenge file to an external azure blob storage, and serve it yourself when let's encrypt request it from the http://yourdomain/.well-known/acme-challenge/{filename} path. (Can be used when local file system cache is enabled or the web app is deployed to multiple region behind traffic manager etc.)</td>
        </tr>
        <tr>
            <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.authorizationChallengeBlobStorageContainer</td>
            <td>(Optional) Used in conjuction with @LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.authorizationChallengeBlobStorageAccount if you want to specify the name of the container that is used, if not specified then letsencrypt-siteextension is used</td>
        </tr>

    </tbody>
</table>
<h3><a id="automatedInstallHeader" href="#">Automated Installation (click to expand)</a></h3>
<div id="automatedInstall" style="display:none;">
    <p>
        If you configure your environment with ARM templates in a fully automated way you can use <a href="https://github.com/sjkp/letsencrypt-siteextension/blob/master/LetsEncrypt.ResourceGroup/Templates/azuredeploy.json">this</a> ARM template and add a few extra app settings.
        With these settings, the site extension will be able to configure the hostname and setup SSL automatically.
    </p>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.acmeBaseUriKey</td>
                <td>The url to Let's Encrypt servers e.g. https://acme-v02.api.letsencrypt.org/directory or https://acme-staging-v02.api.letsencrypt.org/directory </td>
            </tr>
            <tr>
                <td>@LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.emailKey</td>
                <td>The Email used for registering with Let's Encrypt</td>
            </tr>
            <tr>
                <td>
                    @LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.hostNamesKey
                </td>
                <td>Comma separated list of custom hostnames (externally hosted setup with CNames), that should automatically be configured for the site.</td>
            </tr>
        </tbody>
    </table>
</div>



@using (Html.BeginForm())
{
    @*@Html.AntiForgeryToken()*@


    @Html.HiddenFor(model => model.AuthenticationEndpoint)
    @Html.HiddenFor(model => model.AzureWebSitesDefaultDomainName)
    @Html.HiddenFor(model => model.ManagementEndpoint)
    @Html.HiddenFor(model => model.TokenAudience)
    @Html.HiddenFor(model => model.RunFromPackage)

<div class="form-horizontal">
    <hr />

    @if (Model.RunFromPackage && string.IsNullOrEmpty(Environment.GetEnvironmentVariable(LetsEncrypt.Azure.Core.Models.AppSettingsAuthConfig.webRootPath)))
    {
        <div class="alert alert-warning" role="alert">
            <p>Web Site was deployed using "Run From Package", the site extension will have to configure a virtual directory to ensure the challenge file can be browsable at http://your-site/.well-known/acme-challenge. </p>

            <p>If you already host content under /.well-known then you should not continue, instead you should follow the manual setup procedure at <a href="https://github.com/sjkp/letsencrypt-siteextension/wiki/Run-From-Package">https://github.com/sjkp/letsencrypt-siteextension/wiki/Run-From-Package</a></p>
        </div>
    }
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @{
        var authModel = (Model as LetsEncrypt.SiteExtension.Models.AuthenticationModel);
    }
    @if (authModel != null && authModel.Error)
    {
        <div class="alert alert-danger" role="alert">
            @authModel.ErrorMessage
        </div>
    }
    <div class="form-group">
        @Html.LabelFor(model => model.Tenant, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tenant, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tenant, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SubscriptionId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SubscriptionId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SubscriptionId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ClientId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ClientId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ClientId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ClientSecret, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ClientSecret, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ClientSecret, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ResourceGroupName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ResourceGroupName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ResourceGroupName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ServicePlanResourceGroupName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ServicePlanResourceGroupName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ServicePlanResourceGroupName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UseIPBasedSSL, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UseIPBasedSSL, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UseIPBasedSSL, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.WebAppName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.WebAppName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.WebAppName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.TipSlotName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TipSlotName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TipSlotName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SiteSlotName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SiteSlotName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SiteSlotName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.DashboardConnectionString, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DashboardConnectionString, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DashboardConnectionString, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StorageConnectionString, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StorageConnectionString, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.StorageConnectionString, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UpdateAppSettings, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UpdateAppSettings, new { htmlAttributes = new { @class = "form-control" } })
            <span class="text-danger" id="showwarning" style="display:none;">WARNING WEBSITE WILL RESTART.</span>
            @Html.ValidationMessageFor(model => model.UpdateAppSettings, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="form-horizontal">
    <input type="submit" value="Next" class="btn btn-primary pull-right" />
    <br />
    <br />
</div>
}

<div>
</div>
@section scripts {
    $(function () {
    $('#UpdateAppSettings').change(function () {
    if (this.checked)
    {
    $('#showwarning').show();
    } else {
    $('#showwarning').hide();
    }
    });
    $('#automatedInstallHeader').click(function () {
    $('#automatedInstall').toggle();
    });
    });
}